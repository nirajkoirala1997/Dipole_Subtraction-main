matamp = (4*gs^2*qu^4*(-(s13^5*s25*(s23 + s25 - s35)) + 
       2*s12^3*(s13 + s15 - s35)*(s23 + s25 - s35)*
        (s13*(2*s23 + 2*s25 - s35) + s15*(2*s23 + 2*s25 - s35) + 
         s35*(-s23 - s25 + s35)) - 2*s12^2*(s13 + s15 - s35)*
        (s23 + s25 - s35)*(s15^2*(3*s23 + 2*s25 - s35) + 
         s13^2*(2*s23 + 3*s25 - s35) - (s23 + s25)*(s23 + s25 - s35)*s35 + 
         s15*(3*s23^2 + 5*s23*s25 + 2*s25^2 - 4*s23*s35 - 4*s25*s35 + 
           s35^2) + s13*(2*s23^2 + 5*s23*s25 + 3*s25^2 + 
           s15*(5*s23 + 5*s25 - 2*s35) - 4*s23*s35 - 4*s25*s35 + s35^2)) + 
       s13^4*(s15*(s23^2 - 2*s23*s25 - s25*(s25 - 2*s35)) - 
         s25*(s23^2 + 4*s23*s25 + 3*s25^2 - 5*s23*s35 - 7*s25*s35 + 
           4*s35^2)) + s13^3*(s15^2*(3*s23^2 - s23*s25 + s25*(2*s25 + s35)) + 
         s25*(s23^3 - 3*(s25 - 2*s35)*(s25 - s35)^2 + s23^2*s35 - 
           4*s23*(s25^2 - 3*s25*s35 + 2*s35^2)) + 
         s15*(s23^3 - 3*s23^2*s35 + s23*s25*(-5*s25 + 7*s35) - 
           2*s25*(2*s25^2 - 4*s25*s35 + 3*s35^2))) - 
       s15*s23*(s23 + s25 - s35)*(s15^4 + s15^3*(3*s23 + s25 - 4*s35) - 
         (s23 - s35)^2*(s23 + s25 - s35)*s35 + s15^2*(3*s23^2 - s25^2 + 
           s23*(s25 - 9*s35) - 2*s25*s35 + 6*s35^2) + 
         s15*(s23^3 - s25^3 - 6*s23^2*s35 + 2*s25^2*s35 + 2*s25*s35^2 - 
           4*s35^3 + s23*(-2*s25^2 - 2*s25*s35 + 9*s35^2))) + 
       s13^2*(s25*(s23^4 + 3*s23^3*(s25 - s35) + 2*s23^2*s25*(s25 - s35) - 
           s23*(s25 - 6*s35)*(s25 - s35)^2 - (s25 - 4*s35)*(s25 - s35)^3) + 
         s15^3*(2*s23^2 + 3*s25^2 + s23*(-s25 + s35)) - 
         2*s15^2*s35*(s23^2 + s23*(-2*s25 + s35) + s25*(s25 + s35)) + 
         s15*(-s23^4 + s23^3*s35 + s23*(-5*s25^3 + 10*s25^2*s35 - 
             8*s25*s35^2 + s35^3) + s25*(-4*s25^3 + 12*s25^2*s35 - 
             13*s25*s35^2 + 6*s35^3))) + 
       s13*(s25*(s25 - s35)^2*(s23 + s25 - s35)^2*s35 + 
         s15^4*(-s23^2 - 2*s23*s25 + s25^2 + 2*s23*s35) + 
         s15^3*(-4*s23^3 + s25^2*(s25 - 3*s35) + s23*(7*s25 - 6*s35)*s35 + 
           s23^2*(-5*s25 + 8*s35)) + s15^2*(-4*s23^4 - s25^4 + s25^3*s35 + 
           s23^2*(10*s25 - 13*s35)*s35 + s25*s35^3 + 
           s23^3*(-5*s25 + 12*s35) + s23*(-8*s25*s35^2 + 6*s35^3)) - 
         s15*(s23^5 + s23^4*(2*s25 - 5*s35) + s23^3*(s25^2 - 7*s25*s35 + 
             8*s35^2) + s23^2*(s25^3 - 4*s25^2*s35 + 8*s25*s35^2 - 6*s35^3) + 
           s23*(2*s25^4 - 7*s25^3*s35 + 8*s25^2*s35^2 - 6*s25*s35^3 + 
             2*s35^4) + s25*(s25^4 - 5*s25^3*s35 + 8*s25^2*s35^2 - 
             6*s25*s35^3 + 2*s35^4))) + 
       s12*(s13^4*(2*s23^2 + 6*s23*s25 + 4*s25^2 - 3*s23*s35 - 5*s25*s35 + 
           s35^2) + s13^3*(6*s25^3 + s23^2*(4*s25 - 5*s35) - 17*s25^2*s35 + 
           13*s25*s35^2 - 2*s35^3 + s15*(6*s23^2 + 18*s23*s25 + 10*s25^2 - 
             11*s23*s35 - 15*s25*s35 + 4*s35^2) + 
           s23*(10*s25^2 - 20*s25*s35 + 7*s35^2)) + (s23 + s25 - s35)*
          (s15^4*(4*s23 + 2*s25 - s35) + (s23 + s25)^2*(s23 + s25 - s35)*
            s35^2 + s15^3*(6*s23^2 + 4*s23*s25 - 11*s23*s35 - 5*s25*s35 + 
             2*s35^2) - s15*s35*(5*s23^3 + 2*s23^2*(5*s25 - 4*s35) + 
             s25*(3*s25^2 - 4*s25*s35 + 2*s35^2) + s23*(8*s25^2 - 10*s25*
                s35 + 3*s35^2)) + s15^2*(4*s23^3 + 2*s25^3 + 
             s23^2*(6*s25 - 13*s35) - 3*s25^2*s35 + 5*s25*s35^2 - s35^3 + 
             s23*(4*s25^2 - 11*s25*s35 + 10*s35^2))) + 
         s13^2*(2*s23^4 + s23^3*(6*s25 - 5*s35) + (s25 - s35)^2*
            (4*s25^2 - 9*s25*s35 + s35^2) + 2*s15^2*(5*s23^2 + 12*s23*s25 + 
             5*s25^2 - 9*s23*s35 - 9*s25*s35 + 3*s35^2) + 
           2*s23^2*(5*s25^2 - 9*s25*s35 + 4*s35^2) + 
           2*s23*(5*s25^3 - 15*s25^2*s35 + 13*s25*s35^2 - 3*s35^3) + 
           2*s15*(2*s23^3 + 5*s25^3 + s23^2*(8*s25 - 9*s35) - 15*s25^2*s35 + 
             14*s25*s35^2 - 3*s35^3 + s23*(11*s25^2 - 25*s25*s35 + 11*
                s35^2))) + s13*(s15^3*(10*s23^2 + 6*s25^2 + 
             3*s23*(6*s25 - 5*s35) - 11*s25*s35 + 4*s35^2) + 
           2*s15^2*(5*s23^3 + 2*s25^3 + s23^2*(11*s25 - 15*s35) - 
             9*s25^2*s35 + 11*s25*s35^2 - 3*s35^3 + s23*(8*s25^2 - 25*s25*
                s35 + 14*s35^2)) + s15*(6*s23^4 + 6*s25^4 + 
             2*s23^3*(9*s25 - 10*s35) - 20*s25^3*s35 + 26*s25^2*s35^2 - 
             15*s25*s35^3 + 2*s35^4 + s23^2*(24*s25^2 - 50*s25*s35 + 26*
                s35^2) + s23*(18*s25^3 - 50*s25^2*s35 + 50*s25*s35^2 - 15*
                s35^3)) + s35*(-3*s23^4 - s25*(5*s25 - 3*s35)*(s25 - s35)^2 + 
             s23^3*(-11*s25 + 7*s35) - 2*s23^2*(9*s25^2 - 11*s25*s35 + 3*
                s35^2) + s23*(-15*s25^3 + 28*s25^2*s35 - 15*s25*s35^2 + 2*
                s35^3))))))/(81*s13*s15*s23*s25*(s13 + s15 - s35)^2*
      (s23 + s25 - s35)^2)
